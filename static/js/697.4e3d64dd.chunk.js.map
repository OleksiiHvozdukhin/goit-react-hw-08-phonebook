{"version":3,"file":"static/js/697.4e3d64dd.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Title/Title.styled.js","components/Title/Title.js","pages/Contacts/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filters;\nexport const selectError = state => state.contacts.error;\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    console.log('123');\n    const visibleContacts = contacts.filter(contact => {\n      if (\n        filter &&\n        !contact.name.toLowerCase().includes(filter.toLowerCase())\n      ) {\n        return false;\n      }\n      return true;\n    });\n    return visibleContacts.reverse();\n  }\n);\n","import styled from 'styled-components';\nimport { Field, ErrorMessage, Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  border-color: white;\n  border-style: solid;\n  border: 1px solid white;\n  border-radius: 20px;\n\n  width: 400px;\n  padding: 20px;\n  margin: 30px auto;\n`;\n\nexport const FormDiv = styled.label`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n\n  align-items: center;\n\n  gap: 8px;\n  width: 200px;\n  margin: 0 auto;\n  margin-bottom: 30px;\n\n  &:first-of-type {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const Label = styled.label`\n  width: 177px;\n  font-size: 20px;\n  letter-spacing: 22px;\n  outline: none;\n\n  &.firstLabel {\n    transform: translate(10px, 0px);\n  }\n`;\n\nexport const FormField = styled(Field)`\n  outline: none;\n  background-color: inherit;\n  border-style: solid;\n  border-color: #18191f;\n  border-bottom-color: gray;\n  text-align: center;\n  width: 177px;\n  font-size: 10px;\n  letter-spacing: 6px;\n\n  margin-top: 12px;\n\n  color: white;\n\n  transition: border-color 0.2s ease-in-out;\n\n  &:focus-visible,\n  &:hover {\n    border-color: #18191f;\n    border-bottom-color: white;\n  }\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  color: #e000008f;\n  font-size: 12px;\n  font-style: italic;\n`;\n\nexport const StyledButton = styled.button`\n  width: 177px;\n  height: 30px;\n  margin-top: 12px;\n  border-style: solid;\n  border-color: #18191f;\n  background-color: #cecece87;\n  color: white;\n  font-size: 10px;\n  letter-spacing: 11px;\n  cursor: pointer;\n\n  transition: background 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #cecece20;\n\n    box-shadow: inset 0 0 2px grba(255, 255, 255, 0.05),\n      inset 4px 4px 6px rgba(0, 0, 0, 0.2);\n    color: yellow;\n    text-shadow: 0 0 15px yellow, 0 0 25px yellow;\n    animation: glow 1.5s linear infinite;\n    transition: all 0.1s ease;\n  }\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/selectors';\nimport {\n  Label,\n  FormDiv,\n  FormField,\n  StyledErrorMessage,\n  StyledButton,\n  StyledForm,\n} from './ContactForm.styled';\n\nconst inputTemplate = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces.'\n    )\n    .min(2, 'Too Short!')\n    .max(30, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .matches(\n      /^(\\d{1,4}[-\\s]?\\(?\\d{1,3}?\\)?[-\\s]?\\d{1,4}[-\\s]?\\d{1,4}[-\\s]?\\d{1,9})?$/,\n      'Phone number must be in the format of ЧЧЧ-ЧЧ-ЧЧ.'\n    )\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = ({ name, number }, { resetForm }) => {\n    const isDuplicate = contacts.some(items => {\n      return items.name.toLowerCase() === name.toLowerCase();\n    });\n    if (isDuplicate) return window.alert(`${name} is already in contacts.`);\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={inputTemplate}\n        onSubmit={onSubmit}\n      >\n        {() => (\n          <StyledForm>\n            <FormDiv>\n              <Label htmlFor=\"name\" className=\"firstLabel\">\n                name\n              </Label>\n              <FormField\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                placeholder=\"enter name\"\n                autoComplete=\"off\"\n              />\n              <StyledErrorMessage name=\"name\" component=\"div\" />\n            </FormDiv>\n            <FormDiv>\n              <Label htmlFor=\"number\">number</Label>\n              <FormField\n                type=\"tel\"\n                id=\"number\"\n                name=\"number\"\n                placeholder=\"enter phone numb\"\n                autoComplete=\"off\"\n              />\n              <StyledErrorMessage name=\"number\" component=\"div\" />\n            </FormDiv>\n            <StyledButton type=\"submit\">submit</StyledButton>\n          </StyledForm>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactsList = styled.ul`\n  list-style: none;\n  width: 600px;\n  margin: 0 auto;\n  padding: 0;\n`;\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  margin-top: 30px;\n\n  border: 1px solid white;\n`;\n\nexport const ContactTitle = styled.h3`\n  font-size: 16px;\n  letter-spacing: 6px;\n  font-weight: 100;\n`;\n\nexport const ContactButton = styled.button`\n  height: 30px;\n  margin-top: 12px;\n  border-style: solid;\n  border-color: #18191f;\n  background-color: #cecece87;\n  color: white;\n  font-size: 10px;\n  letter-spacing: 11px;\n  cursor: pointer;\n\n  transition: background 0.2s ease-in-out;\n\n  &:hover {\n    background-color: #cecece20;\n\n    box-shadow: inset 0 0 2px grba(255, 255, 255, 0.05),\n      inset 4px 4px 6px rgba(0, 0, 0, 0.2);\n    color: yellow;\n    text-shadow: 0 0 15px yellow, 0 0 25px yellow;\n    animation: glow 1.5s linear infinite;\n    transition: all 0.1s ease;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport {\n  ContactsList,\n  ContactListItem,\n  ContactButton,\n  ContactTitle,\n} from './ContactList.styled';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts);\n  console.log(visibleContacts);\n\n  return (\n    <ContactsList>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactListItem key={id}>\n          <ContactTitle>\n            {name}: {number}\n          </ContactTitle>\n          <ContactButton\n            type=\"button\"\n            id={id}\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </ContactButton>\n        </ContactListItem>\n      ))}\n    </ContactsList>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterForm = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const FilterInput = styled.input`\n  outline: none;\n  background-color: inherit;\n  border-style: solid;\n  border-color: #18191f;\n  border-bottom-color: gray;\n  text-align: center;\n  font-size: 16px;\n  letter-spacing: 11px;\n\n  margin-top: 12px;\n\n  width: 400px;\n\n  color: white;\n\n  transition: border-color 0.2s ease-in-out;\n\n  &:focus-visible,\n  &:hover {\n    border-color: #18191f;\n    border-bottom-color: white;\n  }\n`;\n\nexport const FilterLabel = styled.label`\n  font-size: 20px;\n  letter-spacing: 22px;\n  transform: translate(11px, 0px);\n\n  &.firstLabel {\n    transform: translate(10px, 0px);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { FilterInput, FilterLabel, FilterForm } from './Filter.styled';\nimport { getVisibleContacts } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <FilterForm>\n      <FilterLabel>contacts</FilterLabel>\n      <FilterInput\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={line => dispatch(getVisibleContacts(line.target.value))}\n        autoComplete=\"off\"\n        required\n      />\n    </FilterForm>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n`;\n\nexport const ListElement = styled.li`\n  &::after {\n    content: 'Click me';\n    position: absolute;\n    top: 0px;\n    left: 50%;\n    transform: translateX(-25%);\n    background-color: #333;\n    color: #fff;\n    padding: 5px 10px;\n    border-radius: 5px;\n    font-size: 14px;\n    opacity: 0;\n    pointer-events: none;\n\n    transition: opacity 0.2s ease-in-out;\n  }\n\n  &:hover::after {\n    opacity: 1;\n  }\n`;\n\nexport const ListDiv = styled.div`\n  position: relative;\n  height: 80px;\n  width: 80px;\n  background-color: #18191f;\n  color: #555;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 46px;\n  cursor: pointer;\n  margin: 0 4px;\n  border-radius: 20px;\n  box-shadow: -1px -1px 4px rgba(255, 255, 255, 0.05),\n    4px 4px 6px rgba(0, 0, 0, 0.2),\n    inset -1px -1px 4px rgba(255, 255, 255, 0.05),\n    inset 1px 1px 1px rgba(0, 0, 0, 0.1);\n\n  transition: all 2s ease;\n\n  @keyframes glow {\n    0% {\n      filter: hue-rotate(0deg);\n    }\n\n    100% {\n      filter: hue-rotate(360deg);\n    }\n  }\n`;\n\nexport const ListInput = styled.input`\n  position: absolute;\n  opacity: 0;\n  cursor: pointer;\n  height: 80px;\n  width: 80px;\n  z-index: 10;\n\n  transform: translate(-50%, 0);\n\n  &:checked\n    + ${ListDiv},\n    &:hover\n    + ${ListDiv},\n    &:not(:checked):hover\n    + ${ListDiv} {\n    box-shadow: inset 0 0 2px grba(255, 255, 255, 0.05),\n      inset 4px 4px 6px rgba(0, 0, 0, 0.2);\n    color: yellow;\n    text-shadow: 0 0 15px yellow, 0 0 25px yellow;\n    animation: glow 1.5s linear infinite;\n    transition: all 0.1s ease;\n  }\n\n  &:hover + ${ListDiv} {\n    box-shadow: inset 0 0 2px grba(255, 255, 255, 0.05),\n      inset 4px 4px 6px rgba(0, 0, 0, 0.2);\n    color: yellow;\n    text-shadow: 0 0 15px yellow, 0 0 25px yellow;\n    animation: glow 1.5s linear infinite;\n    transition: all 0.1s ease;\n  }\n`;\n","import { List, ListElement, ListInput, ListDiv } from './Title.styled';\n\nexport const Title = () => {\n  return (\n    <div>\n      <List>\n        <ListElement>\n          <ListInput type=\"checkbox\" />\n          <ListDiv>P</ListDiv>\n        </ListElement>\n        <ListElement>\n          <ListInput type=\"checkbox\" />\n          <ListDiv>H</ListDiv>\n        </ListElement>\n        <ListElement>\n          <ListInput type=\"checkbox\" />\n          <ListDiv>O</ListDiv>\n        </ListElement>\n        <ListElement>\n          <ListInput type=\"checkbox\" />\n          <ListDiv>N</ListDiv>\n        </ListElement>\n        <ListElement>\n          <ListInput type=\"checkbox\" />\n          <ListDiv>E</ListDiv>\n        </ListElement>\n        <ListElement>\n          <ListInput type=\"checkbox\" />\n          <ListDiv>B</ListDiv>\n        </ListElement>\n        <ListElement>\n          <ListInput type=\"checkbox\" />\n          <ListDiv>O</ListDiv>\n        </ListElement>\n        <ListElement>\n          <ListInput type=\"checkbox\" />\n          <ListDiv>O</ListDiv>\n        </ListElement>\n        <ListElement>\n          <ListInput type=\"checkbox\" />\n          <ListDiv>K</ListDiv>\n        </ListElement>\n      </List>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { selectError, selectLoading } from 'redux/selectors';\nimport { Filter } from 'components/Filter/Filter';\nimport { Loader } from 'components/Loader';\nimport { Title } from 'components/Title/Title';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n  const isError = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Title />\n      <ContactForm />\n      <Filter />\n      {isLoading && !isError && <Loader />}\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectError","error","selectLoading","isLoading","selectVisibleContacts","createSelector","filters","filter","console","log","contact","name","toLowerCase","includes","reverse","StyledForm","styled","Form","FormDiv","Label","FormField","Field","StyledErrorMessage","ErrorMessage","StyledButton","inputTemplate","Yup","shape","matches","min","max","required","number","ContactForm","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","resetForm","some","window","alert","addContact","htmlFor","className","type","id","placeholder","autoComplete","component","ContactsList","ContactListItem","ContactTitle","ContactButton","ContactList","visibleContacts","map","onClick","deleteContact","FilterForm","FilterInput","FilterLabel","Filter","pattern","title","onChange","line","getVisibleContacts","target","value","List","ListElement","ListDiv","ListInput","Title","Contacts","isError","useEffect","fetchContacts","Loader"],"sourceRoot":""}